#!/usr/bin/env node

/**
 * Module dependencies.
 */
var express = require('express')
var app = express()
var bodyparser = require('body-parser')
var stylus = require('stylus')
var path = require('path')

//db
var mongo = require('mongodb').MongoClient
var db = 'mongodb://admin:Tambov6966@ds036709.mlab.com:36709/ztaskazure'
var contacts_col = 'contacts'

app.use(bodyparser.urlencoded({extended: false}))
app.use(stylus.middleware(path.join(__dirname,'../public')))
app.use(express.static(path.join(__dirname,'../public')))
app.use(express.static(path.join(__dirname,'../views')))

app.set('view engine', 'jade')


var port = normalizePort(process.env.PORT || '3000')
app.listen(port)

app.get('/', function(req,res){
  res.render('index', {h1: 'Home', text: 'Hello world!'})
})

app.get('/about', function(req,res) {
    res.render('index', {h1: 'About', text: 'Nodejs + express project'})
})

app.route('/contact').get(function(req,res,next) {
  //for get
  var res_text = '';
  mongo.connect(db, function (err,db) {
    db.collection(contacts_col).find({}).toArray(function (err,dbres) {
      if(err) throw err
      /*dbres.forEach(function (obj) {
          res_text += '<div>name: ' + obj.name + ' text: ' + obj.text + '</div><br>'
      })*/
      res_text = dbres
      db.close()
      res.render('contact', {h1: 'Contact', text: 'Request form', requests: res_text})
    })
  })
}).post(function(req,res,next) {
  //for post
  var post = req.body;
  mongo.connect(db, function(err,db){
      if(err) throw err
      if(post.name && post.text) {
          var collection = db.collection(contacts_col)
          collection.insert({
              name: post.name,
              text: post.text
          },function(err,dbres){
              if(err) throw err
              // db.close()
          })
      }
      db.collection(contacts_col).find({}).toArray(function (err,dbres) {
        if(err) throw err
        db.close()
        res.render('contact', {h1: 'Contact', text: 'Request form', requests: dbres})
      })
  })
})



// var http = require('http');
// var server = http.createServer(function(req,res){
//   res.writeHead(200, {'Content-Type': 'text/html'});
//   res.end('Hello world!!');
// })
// var port = normalizePort(process.env.PORT || '3000');
// server.listen(port);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// var app = require('../app');
// var debug = require('debug')('noda:server');
// var http = require('http');
//
// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
